; Includes
(include "./widgets/waka.yuck")
(include "./widgets/bitbucket.yuck")
(include "./widgets/flameshot.yuck")
(include "./widgets/date.yuck")
(include "./widgets/vpn.yuck")
(include "./widgets/vpn-aws.yuck")

(defwindow xenobar
  :windowtype "dock"
  :monitor 0
  :wm-ignore true
  :exclusive true
  :geometry (geometry
              :width "99%"
              :anchor "top center"
              :exclusive true)
  :reserve (struts :side "top" :distance "10%")
  (bar)
)

(defwidget bar []
  (centerbox
    :class "bar"
    :orientation "horizontal"
    :hexpand false
    (workspaces :names active-workspaces :current-idx current-workspace-index)
    (time-date)
    (info)
  )
)

(defwidget info []
  (box
    :class "side-stuff"
    :halign "end"
    :space-evenly false
    :spacing "25"
    (box
        :space-evenly false
        :spacing "10"
        (bitbucket)
        (vpn :state office-vpn-state)
        (vpn-aws :state aws-vpn-state)
        (flameshot)
        (_volume :volume volume)
        (_backlight :brightness brightness-level)
        (_battery :status {EWW_BATTERY.BAT0.status} :battery {EWW_BATTERY.BAT0.capacity}))
        (_network :strength net-strength :name net-name)
    (sep)
    (buttons)
  )
)

(defvar eww "eww -c $HOME/.config/eww")

(defwidget revealer-on-hover [toggle togglename ?transition ?duration]
  (eventbox
    :onhover "${eww} update ${togglename}=true"
    :onhoverlost "${eww} update ${togglename}=false"
    (box
      :space-evenly false
      (children :nth 0)
      (revealer
        :reveal toggle
        :transition {transition ?: "slideright"}
        :duration {duration ?: "300ms"}
        (children :nth 1)))))

(defvar volume-visible false)
(defwidget _volume [volume]
  (box
    :hexpand false
    :class {volume > 100 ? "alert" : "regular"}
    (revealer-on-hover
      :toggle volume-visible
      :togglename "volume-visible"
      (label :text {volume <= 0 ? "󰝟 " :
             volume < 33 ? "󰕿 " :
             volume < 66 ? "󰖀 " :
             volume < 99 ? "󰕾 " : "󱄡 "})
      (label :text "${volume}%"))))

(defvar backlight-visible false)
(defwidget _backlight [brightness]
  (box
    :hexpand false
    :class "regular"
    (revealer-on-hover
      :toggle backlight-visible
      :togglename "backlight-visible"
      (label :text "󰃟 ")
      (label :text "${brightness}%"))))

(defvar battery-visible false)
(defwidget _battery [status battery]
  (box
    :hexpand false
    :class {battery < 20 ? "alert" : "regular"} 
    (revealer-on-hover
      :toggle battery-visible
      :togglename "battery-visible"
      (label :text {status == 'Charging' ? "󰂄" :
             battery < 20 ? "󰁻" :
             battery < 40 ? "󰁽" :
             battery < 60 ? "󰁿" :
             battery < 80 ? "󰂁" : "󰁹"})
      (label :text "${battery}%"))))

(defvar network-visible false)

(defwidget _network [strength name]
  (box
    :hexpand false
    :vexpand true
    :class "regular"
    (revealer-on-hover
      :toggle network-visible
      :togglename "network-visible"
      :ransition "slidedown"
      (label :text {strength == "" ? "󰤮 " :
             strength < 26 ? "󰤟 " :
             strength < 51 ? "󰤢 " :
             strength < 76 ? "󰤥 " : "󰤨 "})
      (label :text "${name} (${strength})"))))

(defwidget buttons []
  (box
    :halign "end"
    :hexpand false
    :space-evenly true
    :spacing "15"
    (box (button :class "exit" :onclick `dbus-send --type=method_call --dest=org.gnome.ScreenSaver /org/gnome/ScreenSaver org.gnome.ScreenSaver.Lock` "󰍃 "))
    (box (button :class "reboot" :onclick `/usr/bin/gnome-session-quit --reboot` " "))
    (box (button :class "power" :onclick `/usr/bin/gnome-session-quit --power-off` " "))))


; ..:: CENTER ::..



; ..:: LEFT: ::..

; nope:
; i3-msg -t get_workspaces
; i3-msg -t subscribe -m '[ "workspace" ]' | jq | grep num > tmp.txt
; yep:
; xprop -spy -root _NET_DESKTOP_NAMES
; xprop -spy -root _NET_CURRENT_DESKTOP

(defwidget workspaces [names current-idx]
    (box
      :halign "start"
      :class "workspaces-ct"
      :hexpand false
      :space-evenly true
      :spacing "12"
      :css "* {margin-left: 20px; margin-right: 20px;}"
    (box
      (button
        :class {current-idx == "1" ? "active-red" : "inactive"}
        :onclick `hyprctl dispatch workspace 1`
        ; (label :text {names =~ `"1"` ? "󰚌" : "󰯈"})))
        (label :text {names =~ `"1"` ? "" : ""})))
    (box
      (button
        :class {current-idx == "2" ? "active-orange" : "inactive"}
        :onclick `hyprctl dispatch workspace 2`
        (label :text {names =~ `"2"` ? "" : ""})))
    (box
      (button
        :class {current-idx == "3" ? "active-blue" : "inactive"}
        :onclick `hyprctl dispatch workspace 3`
        (label :text {names =~ `"3"` ? "" : ""})))
    (box
      (button
        :class {current-idx == "4" ? "active-brown" : "inactive"}
        :onclick `hyprctl dispatch workspace 4`
        (label :text {names =~ `"4"` ? "󰭹" : "󰻞"})))
    (box
      (button
        :class {current-idx == "5" ? "active-pink" : "inactive"}
        :onclick `hyprctl dispatch workspace 5`
        (label :text {names =~ `"5"` ? "󰉋" : "󰉖"})))
    (box
      (button
        :class {current-idx == "6" ? "active-green" : "inactive"}
        :onclick `hyprctl dispatch workspace 6`
        (label :text {names =~ `"6"` ? "󰓇" : "󰓇"})))
    (box
      (button
        :class {current-idx == "7" ? "active-blue" : "inactive"}
        :onclick `hyprctl dispatch workspace 7`
        (label :text {names =~ `"7"` ? "" : ""})))
    (box
      (button
        :class {current-idx == "8" ? "active-orange" : "inactive"}
        :onclick `hyprctl dispatch workspace 8`
        (label :text {names =~ `"8"` ? "󰈹" : "󰈹"})))
    (box
      (button
        :class {current-idx == "9" ? "active-red" : "inactive"}
        :onclick `hyprctl dispatch workspace 9`
        (label :text {names =~ `"9"` ? "󰈹" : "󰈹"})))
    (box
      (button
        :class {current-idx == "10" ? "active-pink" : "inactive"}
        :onclick `hyprctl dispatch workspace 10`
        (label :text {names =~ `"0"` ? "󰈹" : "󰈹"})))
))


; ..:: UTILITIES ::..

(defwidget sep [] (box :hexpand false (label :class "sep" :text "|")))

(deflisten active-workspaces :initial "0" `./scripts/workspace-list.sh`)
(deflisten office-vpn-state :initial "0" `$HOME/.config/eww/scripts/vpn-check.sh Office`)
(deflisten aws-vpn-state :initial "0" `$HOME/.config/eww/scripts/vpn-check.sh AWS`)
(deflisten current-workspace-index :initial "0" `./scripts/workspace-list.sh`)

; get active window name... still didn't figure it out
; (deflisten :initial "N/A" "")

(defpoll brightness-level :interval "5s" :initial "N/A" "./scripts/getbright.sh")

; it'd be nice if it was a deflisten...
(defpoll volume :interval "1s" :initial "N/A" "./scripts/getvol.sh")


(defpoll net-name :interval "60s" :initial "N/A" "nmcli -t -f NAME c show --active | head -n 1")

(defpoll net-strength :interval "5s" :initial `N/A`
	`nmcli -t -f SIGNAL,ACTIVE device wifi | awk -F':' '{if($2=="yes")print$1}'`)
